
Let f(i, z, o) represent the number of strings among the first i strings that can be made using z zeroes and o ones. 

Now, you have two options with the i-th string. Either you make it, then remaining is f(i - 1, z - zero[i], o - one[i])

Or you don't make it. f(i - 1, z, o)

f(i, z, o) = max{f(i - 1, z, o), 1 + f(i - 1, z - z[i], o - o[i])} 

The added condition to check for is that the i-th string can be constructed only if z >= z[i] and o >= o[i].

Answer = f(N, m, n)

---------------------------------------------------

static const int MAX_M = 100, MAX_N = 100, MAX_STRINGS = 600;
int max_strings[MAX_STRINGS + 1][MAX_M + 1][MAX_N + 1];

class Solution {
public:

    int findMaxForm(vector<string>& strs, int m, int n)
    {
        int no_of_strings = strs.size();

        vector <int> zeroes(no_of_strings, 0);
        vector <int> ones(no_of_strings, 0);

        for(int i = 0; i < no_of_strings; i++)
        {
            for(int j = 0; j < strs[i].size(); j++)
            {
                zeroes[i] += (strs[i][j] == '0');
                ones[i]   += (strs[i][j] == '1');
            }
        }

        memset(max_strings, 0, sizeof(max_strings));

        for(int i = 0; i < no_of_strings; i++)
        {
            for(int zero = 0; zero <= m; zero++)
            {
                for(int one = 0; one <= n; one++)
                {
                    if(i == 0)
                    {
                        max_strings[i][zero][one] = (zero >= zeroes[i] && one >= ones[i] ? 1 : 0);
                    }
                    else
                    {
                        max_strings[i][zero][one] = max_strings[i - 1][zero][one];

                        if(zero >= zeroes[i] && one >= ones[i])
                            max_strings[i][zero][one] = max(max_strings[i][zero][one], 1 + max_strings[i - 1][zero - zeroes[i]][one - ones[i]]);
                    }
                }
            }
        }

        if(no_of_strings == 0)
            return 0;

        return max_strings[no_of_strings - 1][m][n];
    }
};

------------------------------------------------------------------------

Notice that this DP can be optimised for space. For each f( i, ... ), we only need f(i - 1, ... ) We don't need i - 2, i - 3, etc ...

But, we need to compute it from one = n down to ones[i], zero = m down to zero[i]

So that when you call f(i, z, o) = max{f(i - 1, z, o), 1 + f(i - 1, z - z[i], o - o[i])}

I can try making i-iterations of f(z, o) = max{f(z, o), 1 + f(z - z[i], o - o[i])}

for(i = 0 to N - 1)
	for(z = zero[i] to m)
		for(o = one[i] to n)
			f(z, o) = max{f(z, o), 1 + f(z - z[i], o - o[i])}

The problem is that when you're calling f(z - z[i], o - o[i]) ... the state (z - z[i], o - o[i]) has already been touched. It doesn't contain the value of
 f(i - 1, z - z[i], o - o[i])

Because it has been touched first. To get over this problem, start from z = m down to z[i] and o = n down to o[i]

----------------------------------------------------

class Solution {
public:

    int findMaxForm(vector<string>& strs, int m, int n)
    {
        int no_of_strings = strs.size();

        vector <int> zeroes(no_of_strings, 0);
        vector <int> ones(no_of_strings, 0);

        for(int i = 0; i < no_of_strings; i++)
        {
            for(int j = 0; j < strs[i].size(); j++)
            {
                zeroes[i] += (strs[i][j] == '0');
                ones[i]   += (strs[i][j] == '1');
            }
        }

        int max_strings[m + 1][n + 1];
        memset(max_strings, 0, sizeof(max_strings));

        for(int i = 0; i < no_of_strings; i++)
        {
            for(int zero = m; zero >= zeroes[i]; zero--)
            {
                for(int one = n; one >= ones[i]; one--)
                {
                    if(i == 0)
                    {
                        max_strings[zero][one] = 1;
                    }
                    else
                    {
                        max_strings[zero][one] = max(max_strings[zero][one], 1 + max_strings[zero - zeroes[i]][one - ones[i]]);
                    }
                }
            }
        }

        if(no_of_strings == 0)
            return 0;

        return max_strings[m][n];
    }
};
