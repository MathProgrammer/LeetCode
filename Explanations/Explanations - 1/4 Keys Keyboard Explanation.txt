Imagine you have a special keyboard with the following keys:

Key 1: (A): Prints one 'A' on screen.

Key 2: (Ctrl-A): Select the whole screen.

Key 3: (Ctrl-C): Copy selection to buffer.

Key 4: (Ctrl-V): Print buffer on screen appending it after what has already been printed.

Now, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.

--------------------------------------------------------------------------------------------------------------

Ultimately, we will end with Ctrl A, Ctrl C, followed by some number of Ctrl V ...

We just need to find the best position for the LEFT MOST select.

If the last select was at position i, then the output so far on the screen is f(i - 1).

And if we copy on move i + 1 and then keep pasting ... [We paste for N - (i + 1) operations.]

 We will get f(i-1)*[N - (i +1) + 1] All the pastes + the original.

For each i, iterate and find the best position for the last select in every position smaller than it. 

f(i) = i, if i <= 6
f(i) = max{f(l - 1)*[i - (l - 1) + 1]}, otherwise. l <= i

--------------------------------------------------------------------------------

class Solution {
public:
    int maxA(int N) {

        vector <int> maximum_output_with_operations(N + 1, 0);

        for(int i = 0; i <= N; i++)
        {
            if(i <= 6)
                maximum_output_with_operations[i] = i;
            else
            {
                for(int break_point = 2; break_point <= i - 2; break_point++)
                {
                    int output_so_far = maximum_output_with_operations[break_point-1];
                    int no_of_copies = i - (break_point + 1);

                    maximum_output_with_operations[i] = max(maximum_output_with_operations[i], output_so_far*(no_of_copies + 1));
                }
            }
        }

        return maximum_output_with_operations[N];

    }
};