
Notice that the answer for 
2 = 1 + 1, Answer = 1
3 = 1 + 2, Answer = 2
4 = 2 + 2, Answer = 4
5 = 3 + 2, Answer = 6, 
6 = 3 + 3, Answer = 9
7 = 3 + 4, Answer = 12

From 5 onwards, Every number's answer > n. 

Notice that in any number's answer, we will not have any number greater than 3. 

Let us say we have 4, we can replace it by 2 + 2 = 4, and keep the product the same. 

Let us say we have a number >= 5, then we can replace it by a sum that increases the product, for example, 5 = 3 + 2, Instead of 5, write 3 x 2 = 6 in the product.

Now, we know that we only have 2s and 3s in the product. The question is how many ? 

If we have three 2s = 2 + 2 + 2. We replace them with 3 + 3 = 6. The product increases from 2 x 2 x 2 = 8 to 3 x 3 = 9

So, we can never have more than two 2s. 

There are atmost two 2s in any number's representation. 

if(n%3 == 0)
	answer = 3 + 3 + ... + 3
if(n%3 == 2)
	answer = 2 + 3 + 3 ... + 3
if(n%3 == 1)
	answer = 2 + 2 + 3 + ... + 3

If a number is = 0 mod 3, then we cannot use one or two 2s, so we don't use it at all. 
If a number = 2 mod 3, we have to use at least one 3 and that is all we use
If a number = 1 mod 3, then we can use two 2s.

n = 2 and n = 3 is a base case. Cannot use 2s for n = 2
Answer = 1 and 2 respectively.

----------------------------------------------------------------------------------

class Solution
{
    public:

    int power(int n, int power)
    {
        int result = 1;

        while(power)
        {
            if(power%2 == 1)
                result = result*n;

            n = n*n;
            power = power >> 1;
        }

        return result;
    }

    int integerBreak(int n)
    {
        if(n == 2)
            return 1;
        if(n == 3)
            return 2;

        int no_of_2s = 0, no_of_3s = 0;
        switch(n%3)
        {
            case 0 : no_of_3s = n/3; break;
            case 1 : no_of_2s = 2, no_of_3s = (n - 4)/3; break;
            case 2 : no_of_2s = 1, no_of_3s = (n - 2)/3; break;
        }

        int product = power(2, no_of_2s)*power(3, no_of_3s);

        return product;
    }
};

--------------------------------------------------------------------------

DP approach - 

The first number of it's answer is either 2 or 3. 

f(i) = max{2*f(i - 2), 3*f(i - 3)}

However f(2) = 1, f(3) = 2.

Store base cases up to i = 6, because you don't want f(i - 3) to be f(3) ... (For 2 and 3, it is better to use the number as it is rather than break it.)

Of course, this DP is not necessary. If n = 0 mod 3, we use 3 and other wise we use one 2 if n = 2 (mod 3) or 1 (mod 3)

----------------------------------------------------------------------------------

class Solution 

{

    
	public:
        
    
	int integerBreak(int n) 
    
	{    
        
		vector <int> greatest_break(n + 1, 0);
        
        

		for(int i = 1; i <= n; i++)
        
		{
            
			if(i <= 6)
            
			{
                
				switch(i)
                
				{
                    		
					case 1: greatest_break[i] = 1; break;
                    	
					case 2: greatest_break[i] = 1; break;
                    		
					case 3: greatest_break[i] = 2; break;
                    
					case 4: greatest_break[i] = 4; break;
                    
					case 5: greatest_break[i] = 6; break;
                    
					case 6: greatest_break[i] = 9; break;
                
				}
            
			}
            
			else
            
			{
                
				greatest_break[i] = max(2*greatest_break[i - 2], 3*greatest_break[i - 3]);
            
			}	
        
		}
        
        

		return greatest_break[n];
    
	}

};
