Let best_cost[i] be the best cost we can achieve by using the same tire in i CONSECUTIVE laps without changing 
So, if we use tire (f, r) conseuctive for i laps, the cost will be 

f + f.r + f.r^2 + ... + f.r^{i - 1}
-----

Let us notice that we will use a tire for the i-th consecutive lap only if f.r^i < change_cost + f 
We know that r = 2 
If we do 20 consecutive laps, the cost for the 20th lap would be > 2^{20} > 10^6 
Change_cost < 10^5 

So, we will never do more than 20 consecutive laps. 

-----

Let f(i) be the minimum time required to finish i laps (consecutive or not). 
In order to compute f(i), we will iterate over the best j, such that we did j CONSECUTIVE laps from (i - j, i]

f(i) = change_cost + min{f(i - j) + best_cost[j]}

The base case is when (i - j = 0). There is no change_cost when we first start. 

If i = j, f(i) = B(j)

-----

class Solution {
public:
    int minimumFinishTime(vector<vector<int>>& tires, int change_time, int num_laps) 
    {   
        const long long oo = 1e15;
        const int MAX_CONSECUTIVE_LAPS  = 20;
        vector <long long> best_cost(MAX_CONSECUTIVE_LAPS + 1, 1e15);
        for(int i = 0; i < tires.size(); i++)
        {
            long long current_cost = tires[i][0];
            long long total_cost = current_cost;
            for(int p = 1; current_cost < change_time + tires[i][0]; p++)
            {
                best_cost[p] = min(best_cost[p], total_cost);
                
                current_cost *= tires[i][1];
                total_cost += current_cost;
            }
        }
        
        vector <long long> best_time_till(num_laps + 1, oo);
        best_time_till[0] = 0;
        for(int i = 1; i <= num_laps; i++)
        {   
            for(int laps = 1; laps <= i && laps <= MAX_CONSECUTIVE_LAPS; laps++)
            {
                
                if(laps == i)
                {
                    best_time_till[i] = min(best_time_till[i], best_cost[laps]);
                }
                else 
                {
                    best_time_till[i] = min(best_time_till[i], change_time + best_cost[laps] + best_time_till[i - laps]);
                }
            }
        }
        
        return best_time_till[num_laps];
    }
};
