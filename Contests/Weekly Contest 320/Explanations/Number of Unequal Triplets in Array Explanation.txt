We just have to count the number of distinct triplets. 

There is a bijection between every triplet and it's order in the array so it's enough to count every triplet once. 

Let us iterate over the middle element in every pair. 

Suppose we have a frequency array. 

Let us build a prefix and suffix sum on the frequency array. 

What is the number of triplets with i as the middle element ? 

We can choose i in frequency[i] ways 

So the answer is Prefix[i - 1] x Frequency[i] x Suffix[i + 1]

-----

class Solution {
public:
    int unequalTriplets(vector<int>& nums) 
    {
        const int MAX = 1000;
        vector <int> frequency(MAX + 5, 0);
        for(int i = 0; i < nums.size(); i++)
        {
            frequency[nums[i]]++;
        }
        
        vector <int> prefix_no_of_ways(MAX + 5, 0);
        for(int i = 1; i <= MAX; i++)
        {
            prefix_no_of_ways[i] =  prefix_no_of_ways[i - 1] + frequency[i];
        }
        
        vector <int> suffix_no_of_ways(MAX + 5, 0);
        for(int i = MAX; i >= 1; i--)
        {
            suffix_no_of_ways[i] = suffix_no_of_ways[i + 1] + frequency[i];
        }
        
        int answer = 0;
        for(int i = 1; i < MAX; i++)
        {
            answer += prefix_no_of_ways[i - 1]*frequency[i]*suffix_no_of_ways[i + 1];
        }
        
        return answer;
    }
};
