1. A has only 10^3 elements. 
The count function is also called at most 10^3 times. 

We can do an O(n) scan for each count function

2. Maintain a map to keep track of the frequency of every element in B. 
Initialise the frequency map in the constructor. 
Update the map in the 'add' function and use it well in the count function.

-----

class FindSumPairs {
public:
    vector <int> A, B;
    map <int, int> frequency;
    
    FindSumPairs(vector<int>& nums1, vector<int>& nums2) 
    {
        A = nums1; 
        B = nums2;
        
        for(int i = 0; i < B.size(); i++)
        {
            frequency[B[i]]++;
        }
    }
    
    void add(int index, int value) 
    {
        frequency[B[index]]--;
        
        B[index] += value;
            
        frequency[B[index]]++;
    }
    
    int count(int sum) 
    {
        int pairs = 0;
        
        for(int i = 0; i < A.size(); i++)
        {
            pairs += frequency[sum - A[i]];
        }
        
        return pairs;
    }
};

/**
 * Your FindSumPairs object will be instantiated and called as such:
 * FindSumPairs* obj = new FindSumPairs(nums1, nums2);
 * obj->add(index,val);
 * int param_2 = obj->count(tot);
 */
