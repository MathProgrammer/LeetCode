For a subarray to be beautiful, every set bit has to occur an even number of times. 
This means the XOR of the subarray is 0. 

-----

XOR[L, R] = XOR(XOR[1, R], XOR[1, L - 1])

XOR[L, R] = 0 => XOR[1, L - 1] = XOR[1, R] 

-----

We can keep track of the frequency of each prefix XOR

We will count the number of segments ending at each i. 

The number of segments ending at i is the number of prefixes with XOR = XOR[1, i]

-----

class Solution {
public:
    long long beautifulSubarrays(vector<int>& nums) {
        
        long long beautiful_subarrays = 0;
        map <int, int> prefix_frequency;
        prefix_frequency[0] = 1;
        
        vector <int> prefix_xor(nums.size());
        for(int i = 0; i < nums.size(); i++)
        {
            prefix_xor[i] = nums[i];
            
            if(i > 0)
            {
                prefix_xor[i] ^= prefix_xor[i - 1];
            }
            
            beautiful_subarrays += prefix_frequency[prefix_xor[i]];
            prefix_frequency[prefix_xor[i]]++;
        }
        
        return beautiful_subarrays;
    }
};
