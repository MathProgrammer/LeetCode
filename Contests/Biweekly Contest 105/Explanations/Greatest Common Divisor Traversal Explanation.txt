Let us build a graph where the prime numbers are vertices and two vertices are connected if the two prime numbers occur together
in the factorization of some integer in the array. 

If gcd(x, y) > 1, then (x, y) have at least one prime factor in common. 

All integers with some prime factor p1 in common are connected. 

If there is some integer with multiple primes p1 and p2 as it's factors, it can be used to connect any multiple of p1 with any multiple of p2. 

Two integers (x, y) are disconnected if there is no path from any of the prime factors of x to any of the prime factors of y. 
If even one pair of prime factors are connected, there is a path between them. 

Therefore, it is enough to only think of the prime factors and check if they are connected. 

The graph is quite beautiful. 

There are two edge cases - 

1. When there is only a single integer - The answer is always yes. 
2. When there is a 1 and there are multiple integers - If there is even one 1 in the array, the answer is false because it can not be reached 
from any other integer 

gcd(1, x) = 1

-----

bool canTraverseAllPairs(vector<int>& nums) {
        
        set <int> N; 
        for(int n : nums)
        {
            N.insert(n);
        }
        
        const int MAX_N = 1e5 + 5;
        
        int has_1 = false;
        vector <vector <int> > graph(MAX_N);
        set <int> vertices; 
        for(int n : N)
        {
            if(n == 1)
            {
                has_1 = true;
            }
            
            vector <int> prime_factors; 
            factorise(n, prime_factors);
            
            for(int p : prime_factors)
            {
                vertices.insert(p);
            }
            
            for(int i = 0; i < prime_factors.size(); i++)
            {
                for(int j = i + 1; j < prime_factors.size(); j++)
                {
                    int u = prime_factors[i], v = prime_factors[j];
                    //cout << "Edge " << u << "-" << v << "\n";
                    graph[u].push_back(v);
                    graph[v].push_back(u);
                }
            }
        }
        
        int no_of_components = 0;
        vector <int> visited(MAX_N, false);
        for(int v : vertices)
        {
            if(vertices.count(v) > 0 && !visited[v])
            {
                dfs(v, graph, visited);
                no_of_components++;
            }
        }
        
        if(nums.size() == 1)
        {
            return true;
        }
        
        return (!has_1 && no_of_components == 1 ? true : false);
    }
    
 ------
