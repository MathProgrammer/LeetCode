We can think of the array as K distinct sequences 
Each sequence is a modular class. 

The number of changes would be (S.size() - LIS) 
Where LIS is the length of the longest non decreasing sequence. 
We will change every element that is not a part of LIS. 

We can find the LIS by maintaining a multiset
Let f(i) be the last element for a LIS of length i 
For each A[i], we will replace the first element that is > A[i] with A[i] 

(If we were looking for the first element >= A[i], we could use lower bound)

-----
class Solution {
public:
    
    int LIS(vector <int> &A)
    {
        multiset <int> lis; 
        
        for(int i = 0; i < A.size(); i++)
        {
            auto index = lis.upper_bound(A[i]);
            
            if(index != lis.end())
            {
                lis.erase(index);
            }
            
            lis.insert(A[i]);
        }
        
        return lis.size();
    }
    
    int kIncreasing(vector<int>& A, int k) {
        vector <vector <int> > sequence(k); 
        
        for(int i = 0; i < A.size(); i++)
        {
            sequence[i%k].push_back(A[i]);
        }
        
        int changes = 0; 
        for(int i = 0; i < k; i++)
        {
            changes += sequence[i].size() - LIS(sequence[i]);
        }
        
        return changes;
    }
};
