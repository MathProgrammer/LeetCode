We will use a Digit DP. 

Let us make a function to return the number of integers < N with sum = S in O(log N) time. 

Notice the number of possible digit sums is not large. It is at most 22 x 9 = 198. 

How many integers are there with sum = S in [L, R] ? 

count(R + 1, S) - count(L, S) 

We can iterate over every possible sum mentioned in [min_sum, max_sum]. 

This takes O( max_sum x log N) time. 

-----

int count(string L, string R, int min_sum, int max_sum) 
    {
        const int MOD = 1e9 + 7, MAX_SUM = 401, MAX_D = 25; 
        vector <vector <int> > no_of_ways(MAX_SUM, vector <int> (MAX_D + 1));
        precompute(no_of_ways, MOD, MAX_SUM - 1, MAX_D - 1);
        
        string R_plus_1 = add_1(R); //cout << "R plus 1 = " << R_plus_1 << "\n";
        int answer = 0;
        for(int digit_sum = min_sum; digit_sum <= max_sum; digit_sum++)
        {
            answer += count_till(R_plus_1, digit_sum, no_of_ways, MOD); 
            answer %= MOD; 
            
            answer -= count_till(L, digit_sum, no_of_ways, MOD);
            answer += MOD; 
            answer %= MOD;
        }
        
        return answer;
    }

------

Now, let us discuss how to calculate the number of integers < N with sum = S

Every integer of this form 

1. Is equal to some prefix of N (possibly empty) of length i, 0 <= i < N.size()
2. Has a smaller digit at  S[i + 1] < N[i + 1] 
3. And can then have a freely chosen suffix

Let us iterate over every prefix, and then iterate over the value of the first smaller digit. 
This fixes the prefix_sum 

suffix_sum = S - prefix_sum

The number of such suffixes for this prefix is no_of_ways to make a sequence of length Suffix, with sum suffix_sum. 
This is something that we will precompute. 


int count_till(string &N, int sum, vector <vector <int> > &no_of_ways, int mod)
    {
        int answer = 0;
        int prefix_sum = 0;
        for(int i = 0; i < N.size(); i++)
        {
            for(int d = 0; d < N[i] - '0'; d++)
            { 
                int prefix_sum_now = prefix_sum + d; 
                int required_suffix_sum = sum - prefix_sum_now, suffix_length = N.size() - (i + 1);
                
                if(required_suffix_sum < 0)
                {
                    break;
                }
                
                answer += no_of_ways[required_suffix_sum][suffix_length];
                answer %= mod;
            }
            
            prefix_sum += N[i] - '0';
        }
        
        //cout << "Without leading 0 N = " << N << " S = " << sum << " Answer = " << answer << "\n";
        
        return answer;
    }
    
------

Precomputing no_of_ways[S][d] 

We will precompute the number of ways to make a sum of S with d digits (including leading 0s). 

Base Cases - 

f(S, d) = 1, if (d == 0 and S = 0) 
f(S, d) = 1 if (d = 1 and 0 <= S <= 9) 

Transition - 

f(S, d) = sum(f(S - last_digit, d - 1)) , where 0 <= last_digit <= 9

void precompute(vector <vector <int> > &no_of_ways, int mod, int sum, int no_of_digits)
{
    no_of_ways[0][0] = 1;

    for(int s = 0; s <= sum; s++)
    {
        for(int d = 1; d <= no_of_digits; d++)
        {
            for(int last_digit = 0; last_digit <= min(s, 9); last_digit++)
            {
                no_of_ways[s][d] += no_of_ways[s - last_digit][d - 1];
                no_of_ways[s][d] %= mod;
            }
        }
    }
}
    
------

Since L and R are given in string format, we need to write a helper function to add 1 to R. 

We will add 1 to the least significant digit that is not 9. 
All the suffix 9's get flipped to 0. 

If the entire string consists of 0's, then append a 1 in front of the string. 

string add_1(string &N)
    {
        string N_plus_1 = N; 
        
        for(int i = N.size() - 1; i >= 0; i--)
        {
            if(N[i] == '9')
            {
                N_plus_1[i] = '0';
            }
            else 
            {
                N_plus_1[i] = N[i] + 1; 
                return N_plus_1;
            }
        }
        
        N_plus_1 = "1" + N_plus_1;
        return N_plus_1;
    }
