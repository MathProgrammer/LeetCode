Let us change the order in which we process the queries. 
Let us process them in reverse order and find the last operation on every row and column.

Suppose the last row operation on row R is T1 and last column operation on column C is T2. 

If T1 > T2, then matrix[r][c] will be impacted by the row R operation last. 
If T1 < T2, then matrix[r][c] will be impacted by the column C operation last. 

------

Let us process queries from latest to newest. 

First, let us check if we have already seen this row or column. 
If yes, then this is not the latest update so we can ignore it. 

Otherwise. let this be the last update for this row R. 
Then, every cell of this row will become = value ? 
Not exactly. There would be some cells (R, C) such that their column C had already been updated. 
So, every cell other than those who's column is already updated will be updated to vaue. 

We can keep track of the number of finalised columns. 

(n - finalised_columns) cells become = value in this row R. 
The sum increases by (n - finalised columns) x value 

We do a symmetric thing for column queries. 

-----

class Solution {
public:
    long long matrixSumQueries(int n, vector<vector<int>>& queries) 
    {
        set <int> rows_seen, columns_seen;
        int finalised_rows = 0, finalised_columns = 0;
        long long sum = 0; 
        for(int i = queries.size() - 1; i >= 0; i--)
        {
            const int ROW = 0, COLUMN = 1;
            int type = queries[i][0], index = queries[i][1], value = queries[i][2];
            switch(type)
            {
                case ROW :  if(rows_seen.count(index) == 1)
                            {
                                break;
                            }
                            sum += (n - finalised_columns)*value;
                            rows_seen.insert(index);
                            finalised_rows++;
                            break;
                    
                case COLUMN : if(columns_seen.count(index) == 1)
                              {
                                 break;
                              }
                              columns_seen.insert(index);
                              sum += (n - finalised_rows)*value;
                              columns_seen.insert(index);
                              finalised_columns++;
                              break;
            }
        }
        
        return sum;
    }
};
