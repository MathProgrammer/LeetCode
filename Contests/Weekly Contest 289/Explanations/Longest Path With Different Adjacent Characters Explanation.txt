There are two kinds of paths - 

Paths which only go down 
Paths which go up till some vertex and then go down. 

We can notice that the 'up-down' path can be gotten by combining the down path of any 2 of v's children. 

-----

For every vertex, let us maintain the largest and second largest down path of all the 26 alphabets. 
Best_child(v, alphabet) is the largest down path from the v -> child_v and S[child_v] = alphabet
Best_child2(v, alphabet) is the second largest such down path

We can notice that the best up-down path at v is either 

1. The down path at v 
2. c1 -> v -> c2, where c1 and c2 are the largest down paths of all of v's children and c1, c2 have different alphabets 
3. c1 -> v -> c2, where c1 and c2 are the largest and second largest down path of the SAME alphabet. 

-----

First calculate the down path of all of v's children recursively. 

Then, we can calculate the total path by checking all 3 possibilities mentioned above. 

-----

void dfs(int v, string &s)
    {
        down_path[v] = 1; 
        
        for(int child_v : tree[v])
        {
            dfs(child_v, s);
            
            if(s[v] == s[child_v])
            {
                continue;
            }
            
            down_path[v] = max(down_path[v], 1 + down_path[child_v]);
            
            int alphabet = s[child_v] - 'a';
            
            if(down_path[child_v] > best_child1[v][alphabet])
            {
                best_child2[v][alphabet] = best_child1[v][alphabet];
                best_child1[v][alphabet] = down_path[child_v];
            }
            else if(down_path[child_v] > best_child2[v][alphabet])
            {
                best_child2[v][alphabet] = down_path[child_v];
            }
        }
        
        total_path[v] = down_path[v];
        for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
        {
            int path_1 = best_child1[v][alpha];
            int path_2 = best_child2[v][alpha];

            total_path[v] = max(total_path[v], path_1 + 1 + path_2);
        }
        
        int path_1 = 0, path_2 = 0; 
        for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
        {
            if(best_child1[v][alpha] > path_1)
            {
                path_2 = path_1;
                path_1 = best_child1[v][alpha];
            }
            else if(best_child1[v][alpha] > path_2)
            {
                path_2 = best_child1[v][alpha];
            }
        }
        total_path[v] = max(total_path[v], path_1 + 1 + path_2);
        
        //cout << "At " << v << " Down = " << down_path[v] << " Total = " << total_path[v] << "\n";
    }
    
    ------
    
    int longestPath(vector<int>& parent, string s) 
    {
        int no_of_vertices = parent.size(); 
        refresh(no_of_vertices + 1);
        
        for(int i = 1; i < no_of_vertices; i++)
        {
            tree[parent[i]].push_back(i);
        }
        
        dfs(0, s);
        
        int answer = 0;
        for(int i = 0; i < no_of_vertices; i++)
        {
            answer = max(answer, total_path[i]);
        }
        
        return answer;
    }
