Let f(r, c) be the largest path we can have if we start from G(r, c). 

From G(r, c), we will move to either

1. G(r1, c) : A(r1, c) > A(r, c)
2. G(r, c1) : A(r, 1) > A(r, c)

Among all choices, we will choose the cell with the maximum f(r1, c) if we move in the same column or maximum f(c, r1) if we move in the same row. 

Let us start with an empty matrix. 
We will insert elements into the matrix in descending order. 
This maintains the invariant that when G(r, c) is inserted, the matrix only has larger elements.

Let us also keep track of the maximum value of f(r, c) for each row and column. 

f(r, c) = 1 + max{row_max(r), column_max(c)}

And then, update row_max, and column_max 

row_max(r) = max{row_max(r), f(r, c)}
column_max(c) = max{column_max(c), f(r, c)}

-----

Handle equal elements in a group. Insert all equal elements at the same time so that they do not interfere in each other's updates. 

The answer is the maximum value of f(r, c) over the whole matrix. 

Inserting elements in any order is an important insight. 

------

class Solution {
public:
    
    struct cell 
    {
        int value, row, column, answer;
        
        cell(){}
        
        cell(int V, int R, int C)
        {
            value = V;
            row = R; 
            column = C;
        }
        
        int operator <(const cell &C)
        {
            if(value == C.value)
            {
                if(row == C.row)
                {
                    return (column < C.column);
                }
                
                return (row < C.row);
            }
            
            return (value > C.value);
        }
    };
    
    
    
    int maxIncreasingCells(vector<vector<int>>& mat) {
        vector <cell> A; 
        int rows = mat.size(), columns = mat[0].size();
        for(int r = 0; r < rows; r++)
        {
            for(int c = 0; c < columns; c++)
            {
                A.push_back(cell(mat[r][c], r, c));
            }
        }
        
        sort(A.begin(), A.end());
        
        int overall_answer = 0;
        vector <int> row_max(rows), column_max(columns);
        for(int i = 0; i < A.size(); )
        {
            vector <cell> current_cells; 
            int j = i;
            for(j = i; j < A.size() && A[i].value == A[j].value; j++)
            {
                A[j].answer = 1 + max(row_max[A[j].row], column_max[A[j].column]);
                
                current_cells.push_back(A[j]);
            }
            i = j;
            
            for(cell c : current_cells)
            {
                row_max[c.row] = max(row_max[c.row], c.answer);
                column_max[c.column] = max(column_max[c.column], c.answer);
                overall_answer = max(overall_answer, c.answer);
            }
        }
        
        return overall_answer;
    }
};
