We can do binary search. 

Let f(x) be the Sum(Ceil(A[i]/x))

Now, we can see that this function is monotonically decreasing. 

f(i + 1) >= f(i) 

---

First, we will check if f(1) <= T

Otherwise, we will set L = 1 and R = oo

----

The invariant is that f(L) > T and f(R) <= T. We will maintain this invariant at every stage of our binary search and stop when (R - L) = 1

------

#include <bits/stdc++.h>

using namespace std;

class Solution
{
    public:

    long long sum_divided_by(vector <int> &A, int x)
    {
        long long sum = 0;
        for(int i = 0; i < A.size(); i++)
        {
            sum += (A[i]/x) + (A[i]%x != 0);
        }

        return sum;
    }

    int smallestDivisor(vector<int>& nums, int threshold)
    {
        int left = 1, right = 1e9;

        if(sum_divided_by(nums, 1) <= threshold)
        {
            return 1;
        }

        //Left is always not possible, Right is always possible
        while(right - left > 1)
        {
            int mid = (left + right)/2;

            if(sum_divided_by(nums, mid) <= threshold)
            {
                right = mid;
            }
            else
            {
                left = mid;
            }
        }

        return right;
    }
};