Let X and Y be two integers where X >= Y 

X - Y <= min(X, Y) 
X - Y <= Y 
X <= 2Y 

What are the possible elements which can form a strong pair with n ? 
[n, 2n] 

-----

Let us process the elements in descending order. 

While processing A[i], let us ensure that the array only has elements in A[i, j], where A[j] <= 2A[i] 

-----

We already know how to find the maximum XOR of n with an array of integers. 

Maintain a trie of the array of integers. 

Start from the highest bit and at each step of the trie, try to go to the opposite of the current bit of n. 

(If n has a 1, try to go down the 0 branch from the current node of the trie and vice-versa.)

-----

Let us maintain two pointers in the array - L and R

While processing A[L], R should point to the greatest element such that A[R] <= 2A[L] 

1. Erase all elements > A[R] from the trie 
2. Insert A[L] into the trie
3. Find the best XOR of A[L] with the trie

Compare this with the global maximum strong pair XOR so far. 

-----

int maximumStrongPairXor(vector<int>& A) 
    {
        sort(A.begin(), A.end()); 
        
        trie * root = new trie();
        int answer = 0;
        for(int right = A.size() - 1, left = A.size() - 1; left >= 0; left--)
        {
            while(A[right] > 2*A[left])
            {
                erase(root, A[right]);
                right--;
            }
            
            insert(root, A[left]);
            int best_pair_for_here = get_maximum_xor(root, A[left]);
            //cout << "Best pair for " << A[left] << " is " << best_pair_for_here << "\n";
            
            answer = max(answer, best_pair_for_here);
        }
        
        return answer; 
    }

----

Trie Functions - 

Insert - 

void insert(trie *root, int n)
    {
        trie *current_node = root;
        current_node->frequency++;
        
        for(int bit = NO_OF_BITS; bit >= 0; bit--)
        {   
            int current_bit = (is_bit_set(n, bit) ? 1 : 0);

            if(current_node->child[current_bit] == nullptr)
            {
                current_node->child[current_bit] = new trie(); 
            }
            
            current_node = current_node->child[current_bit];
            current_node->frequency++;
        }
    }

-----

Erase - 

void erase(trie *root, int n)
    {
        trie *current_node = root;
        current_node->frequency--;
        
        for(int bit = NO_OF_BITS; bit >= 0; bit--)
        {
            int current_bit = (is_bit_set(n, bit) ? 1 : 0);
            
            current_node = current_node->child[current_bit];
            current_node->frequency--;
        }
    }

-----

Get Maximum XOR - 

int get_maximum_xor(trie *root, int n)
    {
        
        int maximum_xor = 0;
        trie *current_node = root;
        for(int bit = NO_OF_BITS; bit >= 0; bit--)
        {
            int same_bit = (is_bit_set(n, bit) ? 1 : 0);
            int other_bit = same_bit^1;

            if(current_node->child[other_bit] != nullptr && current_node->child[other_bit]->frequency > 0)
            {
                current_node = current_node->child[other_bit];
                maximum_xor |= (1 << bit);
            }
            else if(current_node->child[same_bit] != nullptr)
            {
                current_node = current_node->child[same_bit];
            }
            else 
            {
                return maximum_xor;
            }
        }
        
        return maximum_xor;
    }

-----

