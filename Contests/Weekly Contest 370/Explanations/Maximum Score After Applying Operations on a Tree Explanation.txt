Let us solve the problem for the subtree rooted at every vertex v independently. 

What information do we need from the children of v to build the answer for v ? 

-----

We can notice that there must be one vertex 'picked' to be in the end for every path from root to a leaf. 

Since all the values are non-negative, it is optimal to pick at most 1 vertex in every path. 

When we are at a vertex 'v', there are 3 possibilities - 

1. We have picked one of v's ancestors
2. We have picked v
3. We have picked one of v's descendants. 

-----

Let us discuss the transition for each of these states. 

1 - One of v's ancestors 

If we have picked one of v's ancestors already, we can freely pick all the nodes in the subtree rooted at v

f(v, PICKED_ABOVE) = A[v] + sum{ f(child_v, PICKED_ABOVE) }

-----

2 - Picked v 

If we have picked v, then we should freely pick the subtrees rooted at v's children 

f(v, PICKED_HERE) = sum{ f(child_v, PICKED_ABOVE) }

----

3 - Picked below 

Now, we do not know where in the subtrees of v's children, we pick vertices 
So this time we have to be more careful while transitioning. 

We will have to pick exactly one vertex in the subtrees of each of v's children.

f(v, PICKED_BELOW) = A[v] + sum{ max{f(child_v, PICKED_HERE), f(child_v, PICKED_BELOW)} }

-----

Now, let us notice the base case when we are at a leaf 

f(v, PICKED_ABOVE) = A[v] 
f(v, PICKED_HERE) = 0
f(v, PICKED_BELOW) = -oo (Because it is not possible to pick a vertex below a leaf. 

-----

The final answer is 

max{ f(ROOT, PICKED_HERE), f(ROOT, PICKED_BELOW) } 

since we must either pick the root or some vertices below. 


-----

class Solution {
public:

    const int ROOT = 0, PICKED_ABOVE = 0, PICKED_HERE = 1, PICKED_BELOW = 2;
    const long long oo = 1e14 + 9;

    void dfs(int v, int parent_v, vector <vector <long long>> &maximum_sum, vector <vector <int> > &tree, vector <int> &values)
    {
        if(tree[v].size() == 1 && v != ROOT)
        {
            maximum_sum[v][PICKED_ABOVE] = values[v];
            maximum_sum[v][PICKED_HERE] = 0;
            maximum_sum[v][PICKED_BELOW] = -oo;
            return;
        }

        maximum_sum[v][PICKED_ABOVE] = values[v];
        maximum_sum[v][PICKED_HERE] = 0;
        maximum_sum[v][PICKED_BELOW] = values[v];
        for(int child_v : tree[v])
        {
            if(child_v == parent_v)
            {
                continue;
            }

            dfs(child_v, v, maximum_sum, tree, values);

            maximum_sum[v][PICKED_ABOVE] += maximum_sum[child_v][PICKED_ABOVE];
            maximum_sum[v][PICKED_HERE] += maximum_sum[child_v][PICKED_ABOVE];
            maximum_sum[v][PICKED_BELOW] += max(maximum_sum[child_v][PICKED_HERE], maximum_sum[child_v][PICKED_BELOW]);
        }

    }

    long long maximumScoreAfterOperations(vector<vector<int>>& edges, vector<int>& values)
    {
        int no_of_vertices = values.size();
        vector <vector <int> > tree(no_of_vertices + 1);
        for(int i = 0; i < edges.size(); i++)
        {
            int u = edges[i][0], v = edges[i][1];
            tree[u].push_back(v);
            tree[v].push_back(u);
        }

        vector <vector <long long> > maximum_sum(no_of_vertices, vector <long long> (3, 0));
        dfs(0, -1, maximum_sum, tree, values);

        long long answer = max(maximum_sum[0][PICKED_HERE], maximum_sum[0][PICKED_BELOW]);
        return answer;
    }
};
